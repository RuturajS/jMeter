/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 707.0, "minX": 0.0, "maxY": 8860.0, "series": [{"data": [[0.0, 707.0], [0.1, 709.0], [0.2, 734.0], [0.3, 734.0], [0.4, 739.0], [0.5, 739.0], [0.6, 739.0], [0.7, 744.0], [0.8, 751.0], [0.9, 751.0], [1.0, 755.0], [1.1, 755.0], [1.2, 758.0], [1.3, 760.0], [1.4, 760.0], [1.5, 761.0], [1.6, 764.0], [1.7, 764.0], [1.8, 765.0], [1.9, 765.0], [2.0, 768.0], [2.1, 769.0], [2.2, 769.0], [2.3, 769.0], [2.4, 774.0], [2.5, 775.0], [2.6, 778.0], [2.7, 780.0], [2.8, 783.0], [2.9, 783.0], [3.0, 785.0], [3.1, 786.0], [3.2, 788.0], [3.3, 789.0], [3.4, 794.0], [3.5, 798.0], [3.6, 803.0], [3.7, 807.0], [3.8, 807.0], [3.9, 808.0], [4.0, 810.0], [4.1, 812.0], [4.2, 813.0], [4.3, 817.0], [4.4, 817.0], [4.5, 818.0], [4.6, 820.0], [4.7, 820.0], [4.8, 821.0], [4.9, 822.0], [5.0, 822.0], [5.1, 827.0], [5.2, 827.0], [5.3, 832.0], [5.4, 832.0], [5.5, 834.0], [5.6, 843.0], [5.7, 853.0], [5.8, 855.0], [5.9, 1151.0], [6.0, 1168.0], [6.1, 1179.0], [6.2, 1187.0], [6.3, 1193.0], [6.4, 1240.0], [6.5, 1253.0], [6.6, 1270.0], [6.7, 1272.0], [6.8, 1284.0], [6.9, 1286.0], [7.0, 1294.0], [7.1, 1301.0], [7.2, 1302.0], [7.3, 1304.0], [7.4, 1308.0], [7.5, 1311.0], [7.6, 1321.0], [7.7, 1323.0], [7.8, 1325.0], [7.9, 1330.0], [8.0, 1332.0], [8.1, 1333.0], [8.2, 1335.0], [8.3, 1340.0], [8.4, 1345.0], [8.5, 1348.0], [8.6, 1351.0], [8.7, 1353.0], [8.8, 1357.0], [8.9, 1358.0], [9.0, 1359.0], [9.1, 1365.0], [9.2, 1366.0], [9.3, 1369.0], [9.4, 1369.0], [9.5, 1370.0], [9.6, 1372.0], [9.7, 1377.0], [9.8, 1378.0], [9.9, 1380.0], [10.0, 1382.0], [10.1, 1382.0], [10.2, 1382.0], [10.3, 1383.0], [10.4, 1383.0], [10.5, 1384.0], [10.6, 1385.0], [10.7, 1386.0], [10.8, 1388.0], [10.9, 1389.0], [11.0, 1392.0], [11.1, 1398.0], [11.2, 1403.0], [11.3, 1406.0], [11.4, 1409.0], [11.5, 1410.0], [11.6, 1417.0], [11.7, 1431.0], [11.8, 1431.0], [11.9, 1437.0], [12.0, 1558.0], [12.1, 1607.0], [12.2, 1617.0], [12.3, 1642.0], [12.4, 1642.0], [12.5, 1655.0], [12.6, 1684.0], [12.7, 1739.0], [12.8, 1742.0], [12.9, 1746.0], [13.0, 1749.0], [13.1, 1758.0], [13.2, 1763.0], [13.3, 1767.0], [13.4, 1771.0], [13.5, 1771.0], [13.6, 1772.0], [13.7, 1772.0], [13.8, 1773.0], [13.9, 1774.0], [14.0, 1774.0], [14.1, 1781.0], [14.2, 1784.0], [14.3, 1785.0], [14.4, 1789.0], [14.5, 1789.0], [14.6, 1796.0], [14.7, 1805.0], [14.8, 1813.0], [14.9, 1813.0], [15.0, 1827.0], [15.1, 1828.0], [15.2, 1829.0], [15.3, 1831.0], [15.4, 1831.0], [15.5, 1832.0], [15.6, 1833.0], [15.7, 1834.0], [15.8, 1834.0], [15.9, 1839.0], [16.0, 1845.0], [16.1, 1850.0], [16.2, 1850.0], [16.3, 1852.0], [16.4, 1853.0], [16.5, 1857.0], [16.6, 1859.0], [16.7, 1863.0], [16.8, 1872.0], [16.9, 1877.0], [17.0, 1884.0], [17.1, 1885.0], [17.2, 1887.0], [17.3, 1887.0], [17.4, 1895.0], [17.5, 1900.0], [17.6, 1901.0], [17.7, 1914.0], [17.8, 1960.0], [17.9, 1961.0], [18.0, 1962.0], [18.1, 1970.0], [18.2, 2034.0], [18.3, 2061.0], [18.4, 2062.0], [18.5, 2064.0], [18.6, 2094.0], [18.7, 2096.0], [18.8, 2130.0], [18.9, 2158.0], [19.0, 2165.0], [19.1, 2169.0], [19.2, 2169.0], [19.3, 2180.0], [19.4, 2189.0], [19.5, 2192.0], [19.6, 2195.0], [19.7, 2196.0], [19.8, 2200.0], [19.9, 2201.0], [20.0, 2202.0], [20.1, 2202.0], [20.2, 2206.0], [20.3, 2208.0], [20.4, 2208.0], [20.5, 2213.0], [20.6, 2216.0], [20.7, 2217.0], [20.8, 2218.0], [20.9, 2227.0], [21.0, 2231.0], [21.1, 2236.0], [21.2, 2238.0], [21.3, 2244.0], [21.4, 2256.0], [21.5, 2257.0], [21.6, 2260.0], [21.7, 2261.0], [21.8, 2262.0], [21.9, 2263.0], [22.0, 2269.0], [22.1, 2274.0], [22.2, 2276.0], [22.3, 2277.0], [22.4, 2279.0], [22.5, 2281.0], [22.6, 2285.0], [22.7, 2286.0], [22.8, 2287.0], [22.9, 2291.0], [23.0, 2305.0], [23.1, 2310.0], [23.2, 2321.0], [23.3, 2321.0], [23.4, 2321.0], [23.5, 2322.0], [23.6, 2325.0], [23.7, 2326.0], [23.8, 2327.0], [23.9, 2329.0], [24.0, 2342.0], [24.1, 2371.0], [24.2, 2379.0], [24.3, 2385.0], [24.4, 2393.0], [24.5, 2396.0], [24.6, 2444.0], [24.7, 2449.0], [24.8, 2464.0], [24.9, 2474.0], [25.0, 2480.0], [25.1, 2483.0], [25.2, 2515.0], [25.3, 2517.0], [25.4, 2519.0], [25.5, 2538.0], [25.6, 2539.0], [25.7, 2565.0], [25.8, 2588.0], [25.9, 2603.0], [26.0, 2612.0], [26.1, 2623.0], [26.2, 2623.0], [26.3, 2626.0], [26.4, 2630.0], [26.5, 2633.0], [26.6, 2634.0], [26.7, 2634.0], [26.8, 2634.0], [26.9, 2635.0], [27.0, 2635.0], [27.1, 2639.0], [27.2, 2650.0], [27.3, 2652.0], [27.4, 2653.0], [27.5, 2659.0], [27.6, 2660.0], [27.7, 2662.0], [27.8, 2673.0], [27.9, 2676.0], [28.0, 2677.0], [28.1, 2678.0], [28.2, 2681.0], [28.3, 2682.0], [28.4, 2688.0], [28.5, 2692.0], [28.6, 2709.0], [28.7, 2711.0], [28.8, 2711.0], [28.9, 2712.0], [29.0, 2716.0], [29.1, 2719.0], [29.2, 2721.0], [29.3, 2721.0], [29.4, 2731.0], [29.5, 2736.0], [29.6, 2740.0], [29.7, 2741.0], [29.8, 2744.0], [29.9, 2752.0], [30.0, 2771.0], [30.1, 2780.0], [30.2, 2786.0], [30.3, 2844.0], [30.4, 2848.0], [30.5, 2859.0], [30.6, 2873.0], [30.7, 2879.0], [30.8, 2891.0], [30.9, 2893.0], [31.0, 2894.0], [31.1, 2901.0], [31.2, 2909.0], [31.3, 2918.0], [31.4, 2934.0], [31.5, 2940.0], [31.6, 2945.0], [31.7, 2951.0], [31.8, 2962.0], [31.9, 2967.0], [32.0, 2985.0], [32.1, 2988.0], [32.2, 2995.0], [32.3, 3002.0], [32.4, 3005.0], [32.5, 3006.0], [32.6, 3008.0], [32.7, 3011.0], [32.8, 3015.0], [32.9, 3018.0], [33.0, 3018.0], [33.1, 3019.0], [33.2, 3025.0], [33.3, 3029.0], [33.4, 3030.0], [33.5, 3036.0], [33.6, 3040.0], [33.7, 3041.0], [33.8, 3043.0], [33.9, 3044.0], [34.0, 3046.0], [34.1, 3050.0], [34.2, 3052.0], [34.3, 3054.0], [34.4, 3057.0], [34.5, 3071.0], [34.6, 3071.0], [34.7, 3071.0], [34.8, 3071.0], [34.9, 3074.0], [35.0, 3077.0], [35.1, 3079.0], [35.2, 3079.0], [35.3, 3079.0], [35.4, 3087.0], [35.5, 3090.0], [35.6, 3094.0], [35.7, 3101.0], [35.8, 3104.0], [35.9, 3106.0], [36.0, 3119.0], [36.1, 3124.0], [36.2, 3124.0], [36.3, 3132.0], [36.4, 3134.0], [36.5, 3136.0], [36.6, 3154.0], [36.7, 3160.0], [36.8, 3173.0], [36.9, 3176.0], [37.0, 3176.0], [37.1, 3192.0], [37.2, 3220.0], [37.3, 3259.0], [37.4, 3260.0], [37.5, 3264.0], [37.6, 3284.0], [37.7, 3284.0], [37.8, 3287.0], [37.9, 3288.0], [38.0, 3296.0], [38.1, 3302.0], [38.2, 3318.0], [38.3, 3324.0], [38.4, 3328.0], [38.5, 3364.0], [38.6, 3389.0], [38.7, 3390.0], [38.8, 3395.0], [38.9, 3403.0], [39.0, 3411.0], [39.1, 3413.0], [39.2, 3414.0], [39.3, 3436.0], [39.4, 3441.0], [39.5, 3442.0], [39.6, 3447.0], [39.7, 3449.0], [39.8, 3453.0], [39.9, 3459.0], [40.0, 3468.0], [40.1, 3478.0], [40.2, 3479.0], [40.3, 3482.0], [40.4, 3488.0], [40.5, 3502.0], [40.6, 3513.0], [40.7, 3516.0], [40.8, 3525.0], [40.9, 3555.0], [41.0, 3558.0], [41.1, 3559.0], [41.2, 3586.0], [41.3, 3594.0], [41.4, 3601.0], [41.5, 3604.0], [41.6, 3644.0], [41.7, 3646.0], [41.8, 3649.0], [41.9, 3659.0], [42.0, 3659.0], [42.1, 3667.0], [42.2, 3671.0], [42.3, 3682.0], [42.4, 3689.0], [42.5, 3715.0], [42.6, 3724.0], [42.7, 3733.0], [42.8, 3734.0], [42.9, 3754.0], [43.0, 3758.0], [43.1, 3761.0], [43.2, 3763.0], [43.3, 3767.0], [43.4, 3773.0], [43.5, 3779.0], [43.6, 3783.0], [43.7, 3786.0], [43.8, 3790.0], [43.9, 3793.0], [44.0, 3794.0], [44.1, 3797.0], [44.2, 3800.0], [44.3, 3800.0], [44.4, 3816.0], [44.5, 3820.0], [44.6, 3840.0], [44.7, 3848.0], [44.8, 3851.0], [44.9, 3864.0], [45.0, 3867.0], [45.1, 3867.0], [45.2, 3871.0], [45.3, 3874.0], [45.4, 3889.0], [45.5, 3889.0], [45.6, 3890.0], [45.7, 3901.0], [45.8, 3907.0], [45.9, 3909.0], [46.0, 3910.0], [46.1, 3918.0], [46.2, 3918.0], [46.3, 3919.0], [46.4, 3928.0], [46.5, 3935.0], [46.6, 3941.0], [46.7, 3944.0], [46.8, 3945.0], [46.9, 3962.0], [47.0, 3964.0], [47.1, 3980.0], [47.2, 3983.0], [47.3, 3996.0], [47.4, 4002.0], [47.5, 4005.0], [47.6, 4008.0], [47.7, 4018.0], [47.8, 4053.0], [47.9, 4084.0], [48.0, 4086.0], [48.1, 4090.0], [48.2, 4094.0], [48.3, 4095.0], [48.4, 4096.0], [48.5, 4099.0], [48.6, 4108.0], [48.7, 4111.0], [48.8, 4112.0], [48.9, 4113.0], [49.0, 4124.0], [49.1, 4128.0], [49.2, 4129.0], [49.3, 4136.0], [49.4, 4139.0], [49.5, 4152.0], [49.6, 4154.0], [49.7, 4158.0], [49.8, 4163.0], [49.9, 4167.0], [50.0, 4174.0], [50.1, 4181.0], [50.2, 4187.0], [50.3, 4196.0], [50.4, 4204.0], [50.5, 4209.0], [50.6, 4211.0], [50.7, 4213.0], [50.8, 4226.0], [50.9, 4227.0], [51.0, 4235.0], [51.1, 4239.0], [51.2, 4248.0], [51.3, 4250.0], [51.4, 4252.0], [51.5, 4252.0], [51.6, 4258.0], [51.7, 4262.0], [51.8, 4267.0], [51.9, 4273.0], [52.0, 4274.0], [52.1, 4282.0], [52.2, 4283.0], [52.3, 4290.0], [52.4, 4293.0], [52.5, 4303.0], [52.6, 4304.0], [52.7, 4308.0], [52.8, 4310.0], [52.9, 4313.0], [53.0, 4318.0], [53.1, 4326.0], [53.2, 4335.0], [53.3, 4337.0], [53.4, 4341.0], [53.5, 4342.0], [53.6, 4353.0], [53.7, 4364.0], [53.8, 4367.0], [53.9, 4369.0], [54.0, 4375.0], [54.1, 4410.0], [54.2, 4424.0], [54.3, 4450.0], [54.4, 4454.0], [54.5, 4459.0], [54.6, 4460.0], [54.7, 4481.0], [54.8, 4505.0], [54.9, 4515.0], [55.0, 4529.0], [55.1, 4536.0], [55.2, 4549.0], [55.3, 4558.0], [55.4, 4563.0], [55.5, 4565.0], [55.6, 4575.0], [55.7, 4577.0], [55.8, 4583.0], [55.9, 4584.0], [56.0, 4589.0], [56.1, 4590.0], [56.2, 4590.0], [56.3, 4593.0], [56.4, 4598.0], [56.5, 4599.0], [56.6, 4608.0], [56.7, 4609.0], [56.8, 4612.0], [56.9, 4614.0], [57.0, 4625.0], [57.1, 4629.0], [57.2, 4630.0], [57.3, 4632.0], [57.4, 4634.0], [57.5, 4635.0], [57.6, 4643.0], [57.7, 4662.0], [57.8, 4670.0], [57.9, 4680.0], [58.0, 4690.0], [58.1, 4691.0], [58.2, 4694.0], [58.3, 4699.0], [58.4, 4705.0], [58.5, 4714.0], [58.6, 4716.0], [58.7, 4732.0], [58.8, 4732.0], [58.9, 4735.0], [59.0, 4736.0], [59.1, 4737.0], [59.2, 4740.0], [59.3, 4744.0], [59.4, 4745.0], [59.5, 4748.0], [59.6, 4753.0], [59.7, 4771.0], [59.8, 4778.0], [59.9, 4780.0], [60.0, 4787.0], [60.1, 4787.0], [60.2, 4788.0], [60.3, 4805.0], [60.4, 4816.0], [60.5, 4830.0], [60.6, 4839.0], [60.7, 4844.0], [60.8, 4847.0], [60.9, 4895.0], [61.0, 4902.0], [61.1, 4923.0], [61.2, 4949.0], [61.3, 4976.0], [61.4, 4988.0], [61.5, 4989.0], [61.6, 5008.0], [61.7, 5026.0], [61.8, 5027.0], [61.9, 5031.0], [62.0, 5037.0], [62.1, 5038.0], [62.2, 5038.0], [62.3, 5043.0], [62.4, 5049.0], [62.5, 5051.0], [62.6, 5051.0], [62.7, 5056.0], [62.8, 5059.0], [62.9, 5061.0], [63.0, 5061.0], [63.1, 5062.0], [63.2, 5063.0], [63.3, 5064.0], [63.4, 5065.0], [63.5, 5075.0], [63.6, 5079.0], [63.7, 5096.0], [63.8, 5096.0], [63.9, 5097.0], [64.0, 5100.0], [64.1, 5109.0], [64.2, 5120.0], [64.3, 5121.0], [64.4, 5124.0], [64.5, 5125.0], [64.6, 5129.0], [64.7, 5130.0], [64.8, 5131.0], [64.9, 5134.0], [65.0, 5139.0], [65.1, 5142.0], [65.2, 5143.0], [65.3, 5143.0], [65.4, 5148.0], [65.5, 5155.0], [65.6, 5159.0], [65.7, 5171.0], [65.8, 5208.0], [65.9, 5208.0], [66.0, 5230.0], [66.1, 5236.0], [66.2, 5242.0], [66.3, 5242.0], [66.4, 5245.0], [66.5, 5248.0], [66.6, 5260.0], [66.7, 5303.0], [66.8, 5307.0], [66.9, 5313.0], [67.0, 5324.0], [67.1, 5333.0], [67.2, 5338.0], [67.3, 5426.0], [67.4, 5433.0], [67.5, 5436.0], [67.6, 5446.0], [67.7, 5447.0], [67.8, 5458.0], [67.9, 5462.0], [68.0, 5464.0], [68.1, 5464.0], [68.2, 5467.0], [68.3, 5479.0], [68.4, 5484.0], [68.5, 5488.0], [68.6, 5489.0], [68.7, 5512.0], [68.8, 5515.0], [68.9, 5519.0], [69.0, 5520.0], [69.1, 5522.0], [69.2, 5525.0], [69.3, 5526.0], [69.4, 5528.0], [69.5, 5530.0], [69.6, 5540.0], [69.7, 5563.0], [69.8, 5570.0], [69.9, 5571.0], [70.0, 5574.0], [70.1, 5644.0], [70.2, 5648.0], [70.3, 5651.0], [70.4, 5653.0], [70.5, 5660.0], [70.6, 5661.0], [70.7, 5661.0], [70.8, 5665.0], [70.9, 5673.0], [71.0, 5675.0], [71.1, 5676.0], [71.2, 5678.0], [71.3, 5681.0], [71.4, 5682.0], [71.5, 5682.0], [71.6, 5691.0], [71.7, 5692.0], [71.8, 5693.0], [71.9, 5695.0], [72.0, 5711.0], [72.1, 5745.0], [72.2, 5762.0], [72.3, 5859.0], [72.4, 5878.0], [72.5, 5890.0], [72.6, 5930.0], [72.7, 5938.0], [72.8, 5945.0], [72.9, 5960.0], [73.0, 6034.0], [73.1, 6053.0], [73.2, 6061.0], [73.3, 6067.0], [73.4, 6067.0], [73.5, 6084.0], [73.6, 6090.0], [73.7, 6100.0], [73.8, 6106.0], [73.9, 6111.0], [74.0, 6113.0], [74.1, 6119.0], [74.2, 6120.0], [74.3, 6121.0], [74.4, 6140.0], [74.5, 6183.0], [74.6, 6235.0], [74.7, 6241.0], [74.8, 6246.0], [74.9, 6252.0], [75.0, 6257.0], [75.1, 6257.0], [75.2, 6259.0], [75.3, 6262.0], [75.4, 6265.0], [75.5, 6269.0], [75.6, 6270.0], [75.7, 6273.0], [75.8, 6277.0], [75.9, 6279.0], [76.0, 6280.0], [76.1, 6284.0], [76.2, 6286.0], [76.3, 6290.0], [76.4, 6294.0], [76.5, 6296.0], [76.6, 6296.0], [76.7, 6298.0], [76.8, 6298.0], [76.9, 6300.0], [77.0, 6303.0], [77.1, 6310.0], [77.2, 6313.0], [77.3, 6313.0], [77.4, 6315.0], [77.5, 6317.0], [77.6, 6318.0], [77.7, 6320.0], [77.8, 6322.0], [77.9, 6322.0], [78.0, 6325.0], [78.1, 6330.0], [78.2, 6332.0], [78.3, 6332.0], [78.4, 6334.0], [78.5, 6334.0], [78.6, 6338.0], [78.7, 6339.0], [78.8, 6342.0], [78.9, 6347.0], [79.0, 6347.0], [79.1, 6354.0], [79.2, 6358.0], [79.3, 6394.0], [79.4, 6410.0], [79.5, 6413.0], [79.6, 6420.0], [79.7, 6422.0], [79.8, 6425.0], [79.9, 6433.0], [80.0, 6436.0], [80.1, 6436.0], [80.2, 6445.0], [80.3, 6449.0], [80.4, 6457.0], [80.5, 6457.0], [80.6, 6463.0], [80.7, 6471.0], [80.8, 6476.0], [80.9, 6486.0], [81.0, 6489.0], [81.1, 6495.0], [81.2, 6495.0], [81.3, 6498.0], [81.4, 6500.0], [81.5, 6525.0], [81.6, 6602.0], [81.7, 6616.0], [81.8, 6638.0], [81.9, 6654.0], [82.0, 6660.0], [82.1, 6669.0], [82.2, 6674.0], [82.3, 6677.0], [82.4, 6714.0], [82.5, 6724.0], [82.6, 6752.0], [82.7, 6765.0], [82.8, 6777.0], [82.9, 6788.0], [83.0, 6789.0], [83.1, 6805.0], [83.2, 6808.0], [83.3, 6825.0], [83.4, 6886.0], [83.5, 6898.0], [83.6, 6900.0], [83.7, 6903.0], [83.8, 6912.0], [83.9, 6915.0], [84.0, 6916.0], [84.1, 6919.0], [84.2, 6923.0], [84.3, 6930.0], [84.4, 6941.0], [84.5, 6951.0], [84.6, 6951.0], [84.7, 6952.0], [84.8, 6960.0], [84.9, 6965.0], [85.0, 6966.0], [85.1, 6971.0], [85.2, 6978.0], [85.3, 6979.0], [85.4, 6983.0], [85.5, 6984.0], [85.6, 6985.0], [85.7, 6988.0], [85.8, 6988.0], [85.9, 6992.0], [86.0, 6995.0], [86.1, 7003.0], [86.2, 7008.0], [86.3, 7009.0], [86.4, 7012.0], [86.5, 7012.0], [86.6, 7014.0], [86.7, 7019.0], [86.8, 7021.0], [86.9, 7023.0], [87.0, 7060.0], [87.1, 7064.0], [87.2, 7070.0], [87.3, 7074.0], [87.4, 7084.0], [87.5, 7105.0], [87.6, 7114.0], [87.7, 7116.0], [87.8, 7131.0], [87.9, 7140.0], [88.0, 7162.0], [88.1, 7176.0], [88.2, 7181.0], [88.3, 7197.0], [88.4, 7211.0], [88.5, 7220.0], [88.6, 7232.0], [88.7, 7233.0], [88.8, 7237.0], [88.9, 7237.0], [89.0, 7239.0], [89.1, 7243.0], [89.2, 7244.0], [89.3, 7245.0], [89.4, 7271.0], [89.5, 7283.0], [89.6, 7299.0], [89.7, 7300.0], [89.8, 7306.0], [89.9, 7318.0], [90.0, 7319.0], [90.1, 7320.0], [90.2, 7324.0], [90.3, 7324.0], [90.4, 7355.0], [90.5, 7356.0], [90.6, 7427.0], [90.7, 7428.0], [90.8, 7430.0], [90.9, 7436.0], [91.0, 7444.0], [91.1, 7462.0], [91.2, 7465.0], [91.3, 7498.0], [91.4, 7499.0], [91.5, 7516.0], [91.6, 7518.0], [91.7, 7524.0], [91.8, 7531.0], [91.9, 7553.0], [92.0, 7572.0], [92.1, 7573.0], [92.2, 7611.0], [92.3, 7659.0], [92.4, 7671.0], [92.5, 7720.0], [92.6, 7735.0], [92.7, 7740.0], [92.8, 7749.0], [92.9, 7752.0], [93.0, 7754.0], [93.1, 7755.0], [93.2, 7764.0], [93.3, 7805.0], [93.4, 7829.0], [93.5, 7901.0], [93.6, 7902.0], [93.7, 7908.0], [93.8, 7914.0], [93.9, 7914.0], [94.0, 7917.0], [94.1, 7917.0], [94.2, 7918.0], [94.3, 7925.0], [94.4, 7935.0], [94.5, 7944.0], [94.6, 7952.0], [94.7, 7956.0], [94.8, 7960.0], [94.9, 7965.0], [95.0, 7968.0], [95.1, 7986.0], [95.2, 7999.0], [95.3, 8017.0], [95.4, 8021.0], [95.5, 8048.0], [95.6, 8067.0], [95.7, 8068.0], [95.8, 8072.0], [95.9, 8080.0], [96.0, 8089.0], [96.1, 8097.0], [96.2, 8120.0], [96.3, 8142.0], [96.4, 8151.0], [96.5, 8158.0], [96.6, 8159.0], [96.7, 8163.0], [96.8, 8164.0], [96.9, 8172.0], [97.0, 8179.0], [97.1, 8182.0], [97.2, 8186.0], [97.3, 8195.0], [97.4, 8199.0], [97.5, 8202.0], [97.6, 8206.0], [97.7, 8216.0], [97.8, 8217.0], [97.9, 8228.0], [98.0, 8230.0], [98.1, 8232.0], [98.2, 8242.0], [98.3, 8264.0], [98.4, 8270.0], [98.5, 8274.0], [98.6, 8282.0], [98.7, 8302.0], [98.8, 8330.0], [98.9, 8422.0], [99.0, 8502.0], [99.1, 8550.0], [99.2, 8576.0], [99.3, 8611.0], [99.4, 8619.0], [99.5, 8654.0], [99.6, 8722.0], [99.7, 8743.0], [99.8, 8767.0], [99.9, 8860.0]], "isOverall": false, "label": "https://superset.m-net.in/bi/site/site1/dashboards/6265efb8-258f-4ad5-9461-7a952c6df353/spends%20roi/tv%20spends?showmydashboards=1", "isController": false}, {"data": [[0.0, 707.0], [0.1, 709.0], [0.2, 734.0], [0.3, 734.0], [0.4, 739.0], [0.5, 739.0], [0.6, 739.0], [0.7, 744.0], [0.8, 751.0], [0.9, 751.0], [1.0, 755.0], [1.1, 755.0], [1.2, 758.0], [1.3, 760.0], [1.4, 760.0], [1.5, 761.0], [1.6, 764.0], [1.7, 764.0], [1.8, 765.0], [1.9, 765.0], [2.0, 768.0], [2.1, 769.0], [2.2, 769.0], [2.3, 769.0], [2.4, 774.0], [2.5, 775.0], [2.6, 778.0], [2.7, 780.0], [2.8, 783.0], [2.9, 783.0], [3.0, 785.0], [3.1, 786.0], [3.2, 788.0], [3.3, 789.0], [3.4, 794.0], [3.5, 798.0], [3.6, 803.0], [3.7, 807.0], [3.8, 807.0], [3.9, 808.0], [4.0, 810.0], [4.1, 812.0], [4.2, 813.0], [4.3, 817.0], [4.4, 817.0], [4.5, 818.0], [4.6, 820.0], [4.7, 820.0], [4.8, 821.0], [4.9, 822.0], [5.0, 822.0], [5.1, 827.0], [5.2, 827.0], [5.3, 832.0], [5.4, 832.0], [5.5, 834.0], [5.6, 843.0], [5.7, 853.0], [5.8, 855.0], [5.9, 1151.0], [6.0, 1168.0], [6.1, 1179.0], [6.2, 1187.0], [6.3, 1193.0], [6.4, 1240.0], [6.5, 1253.0], [6.6, 1270.0], [6.7, 1272.0], [6.8, 1284.0], [6.9, 1286.0], [7.0, 1294.0], [7.1, 1301.0], [7.2, 1302.0], [7.3, 1304.0], [7.4, 1308.0], [7.5, 1311.0], [7.6, 1321.0], [7.7, 1323.0], [7.8, 1325.0], [7.9, 1330.0], [8.0, 1332.0], [8.1, 1333.0], [8.2, 1335.0], [8.3, 1340.0], [8.4, 1345.0], [8.5, 1348.0], [8.6, 1351.0], [8.7, 1353.0], [8.8, 1357.0], [8.9, 1358.0], [9.0, 1359.0], [9.1, 1365.0], [9.2, 1366.0], [9.3, 1369.0], [9.4, 1369.0], [9.5, 1370.0], [9.6, 1372.0], [9.7, 1377.0], [9.8, 1378.0], [9.9, 1380.0], [10.0, 1382.0], [10.1, 1382.0], [10.2, 1382.0], [10.3, 1383.0], [10.4, 1383.0], [10.5, 1384.0], [10.6, 1385.0], [10.7, 1386.0], [10.8, 1388.0], [10.9, 1389.0], [11.0, 1392.0], [11.1, 1398.0], [11.2, 1403.0], [11.3, 1406.0], [11.4, 1409.0], [11.5, 1410.0], [11.6, 1417.0], [11.7, 1431.0], [11.8, 1431.0], [11.9, 1437.0], [12.0, 1558.0], [12.1, 1607.0], [12.2, 1617.0], [12.3, 1642.0], [12.4, 1642.0], [12.5, 1655.0], [12.6, 1684.0], [12.7, 1739.0], [12.8, 1742.0], [12.9, 1746.0], [13.0, 1749.0], [13.1, 1758.0], [13.2, 1763.0], [13.3, 1767.0], [13.4, 1771.0], [13.5, 1771.0], [13.6, 1772.0], [13.7, 1772.0], [13.8, 1773.0], [13.9, 1774.0], [14.0, 1774.0], [14.1, 1781.0], [14.2, 1784.0], [14.3, 1785.0], [14.4, 1789.0], [14.5, 1789.0], [14.6, 1796.0], [14.7, 1805.0], [14.8, 1813.0], [14.9, 1813.0], [15.0, 1827.0], [15.1, 1828.0], [15.2, 1829.0], [15.3, 1831.0], [15.4, 1831.0], [15.5, 1832.0], [15.6, 1833.0], [15.7, 1834.0], [15.8, 1834.0], [15.9, 1839.0], [16.0, 1845.0], [16.1, 1850.0], [16.2, 1850.0], [16.3, 1852.0], [16.4, 1853.0], [16.5, 1857.0], [16.6, 1859.0], [16.7, 1863.0], [16.8, 1872.0], [16.9, 1877.0], [17.0, 1884.0], [17.1, 1885.0], [17.2, 1887.0], [17.3, 1887.0], [17.4, 1895.0], [17.5, 1900.0], [17.6, 1901.0], [17.7, 1914.0], [17.8, 1960.0], [17.9, 1961.0], [18.0, 1962.0], [18.1, 1970.0], [18.2, 2034.0], [18.3, 2061.0], [18.4, 2062.0], [18.5, 2064.0], [18.6, 2094.0], [18.7, 2096.0], [18.8, 2130.0], [18.9, 2158.0], [19.0, 2165.0], [19.1, 2169.0], [19.2, 2169.0], [19.3, 2180.0], [19.4, 2189.0], [19.5, 2192.0], [19.6, 2195.0], [19.7, 2196.0], [19.8, 2200.0], [19.9, 2201.0], [20.0, 2202.0], [20.1, 2202.0], [20.2, 2206.0], [20.3, 2208.0], [20.4, 2208.0], [20.5, 2213.0], [20.6, 2216.0], [20.7, 2217.0], [20.8, 2218.0], [20.9, 2227.0], [21.0, 2231.0], [21.1, 2236.0], [21.2, 2238.0], [21.3, 2244.0], [21.4, 2256.0], [21.5, 2257.0], [21.6, 2260.0], [21.7, 2261.0], [21.8, 2262.0], [21.9, 2263.0], [22.0, 2269.0], [22.1, 2274.0], [22.2, 2276.0], [22.3, 2277.0], [22.4, 2279.0], [22.5, 2281.0], [22.6, 2285.0], [22.7, 2286.0], [22.8, 2287.0], [22.9, 2291.0], [23.0, 2305.0], [23.1, 2310.0], [23.2, 2321.0], [23.3, 2321.0], [23.4, 2321.0], [23.5, 2322.0], [23.6, 2325.0], [23.7, 2326.0], [23.8, 2327.0], [23.9, 2329.0], [24.0, 2342.0], [24.1, 2371.0], [24.2, 2379.0], [24.3, 2385.0], [24.4, 2393.0], [24.5, 2396.0], [24.6, 2444.0], [24.7, 2449.0], [24.8, 2464.0], [24.9, 2474.0], [25.0, 2480.0], [25.1, 2483.0], [25.2, 2515.0], [25.3, 2517.0], [25.4, 2519.0], [25.5, 2538.0], [25.6, 2539.0], [25.7, 2565.0], [25.8, 2588.0], [25.9, 2603.0], [26.0, 2612.0], [26.1, 2623.0], [26.2, 2623.0], [26.3, 2626.0], [26.4, 2630.0], [26.5, 2633.0], [26.6, 2634.0], [26.7, 2634.0], [26.8, 2634.0], [26.9, 2635.0], [27.0, 2635.0], [27.1, 2639.0], [27.2, 2650.0], [27.3, 2652.0], [27.4, 2653.0], [27.5, 2659.0], [27.6, 2660.0], [27.7, 2662.0], [27.8, 2673.0], [27.9, 2676.0], [28.0, 2677.0], [28.1, 2678.0], [28.2, 2681.0], [28.3, 2682.0], [28.4, 2688.0], [28.5, 2692.0], [28.6, 2709.0], [28.7, 2711.0], [28.8, 2711.0], [28.9, 2712.0], [29.0, 2716.0], [29.1, 2719.0], [29.2, 2721.0], [29.3, 2721.0], [29.4, 2731.0], [29.5, 2736.0], [29.6, 2740.0], [29.7, 2741.0], [29.8, 2744.0], [29.9, 2752.0], [30.0, 2771.0], [30.1, 2780.0], [30.2, 2786.0], [30.3, 2844.0], [30.4, 2848.0], [30.5, 2859.0], [30.6, 2873.0], [30.7, 2879.0], [30.8, 2891.0], [30.9, 2893.0], [31.0, 2894.0], [31.1, 2901.0], [31.2, 2909.0], [31.3, 2918.0], [31.4, 2934.0], [31.5, 2940.0], [31.6, 2945.0], [31.7, 2951.0], [31.8, 2962.0], [31.9, 2967.0], [32.0, 2985.0], [32.1, 2988.0], [32.2, 2995.0], [32.3, 3002.0], [32.4, 3005.0], [32.5, 3006.0], [32.6, 3008.0], [32.7, 3011.0], [32.8, 3015.0], [32.9, 3018.0], [33.0, 3018.0], [33.1, 3019.0], [33.2, 3025.0], [33.3, 3029.0], [33.4, 3030.0], [33.5, 3036.0], [33.6, 3040.0], [33.7, 3041.0], [33.8, 3043.0], [33.9, 3044.0], [34.0, 3046.0], [34.1, 3050.0], [34.2, 3052.0], [34.3, 3054.0], [34.4, 3057.0], [34.5, 3071.0], [34.6, 3071.0], [34.7, 3071.0], [34.8, 3071.0], [34.9, 3074.0], [35.0, 3077.0], [35.1, 3079.0], [35.2, 3079.0], [35.3, 3079.0], [35.4, 3087.0], [35.5, 3090.0], [35.6, 3094.0], [35.7, 3101.0], [35.8, 3104.0], [35.9, 3106.0], [36.0, 3119.0], [36.1, 3124.0], [36.2, 3124.0], [36.3, 3132.0], [36.4, 3134.0], [36.5, 3136.0], [36.6, 3154.0], [36.7, 3160.0], [36.8, 3173.0], [36.9, 3176.0], [37.0, 3176.0], [37.1, 3192.0], [37.2, 3220.0], [37.3, 3259.0], [37.4, 3260.0], [37.5, 3264.0], [37.6, 3284.0], [37.7, 3284.0], [37.8, 3287.0], [37.9, 3288.0], [38.0, 3296.0], [38.1, 3302.0], [38.2, 3318.0], [38.3, 3324.0], [38.4, 3328.0], [38.5, 3364.0], [38.6, 3389.0], [38.7, 3390.0], [38.8, 3395.0], [38.9, 3403.0], [39.0, 3411.0], [39.1, 3413.0], [39.2, 3414.0], [39.3, 3436.0], [39.4, 3441.0], [39.5, 3442.0], [39.6, 3447.0], [39.7, 3449.0], [39.8, 3453.0], [39.9, 3459.0], [40.0, 3468.0], [40.1, 3478.0], [40.2, 3479.0], [40.3, 3482.0], [40.4, 3488.0], [40.5, 3502.0], [40.6, 3513.0], [40.7, 3516.0], [40.8, 3525.0], [40.9, 3555.0], [41.0, 3558.0], [41.1, 3559.0], [41.2, 3586.0], [41.3, 3594.0], [41.4, 3601.0], [41.5, 3604.0], [41.6, 3644.0], [41.7, 3646.0], [41.8, 3649.0], [41.9, 3659.0], [42.0, 3659.0], [42.1, 3667.0], [42.2, 3671.0], [42.3, 3682.0], [42.4, 3689.0], [42.5, 3715.0], [42.6, 3724.0], [42.7, 3733.0], [42.8, 3734.0], [42.9, 3754.0], [43.0, 3758.0], [43.1, 3761.0], [43.2, 3763.0], [43.3, 3767.0], [43.4, 3773.0], [43.5, 3779.0], [43.6, 3783.0], [43.7, 3786.0], [43.8, 3790.0], [43.9, 3793.0], [44.0, 3794.0], [44.1, 3797.0], [44.2, 3800.0], [44.3, 3800.0], [44.4, 3816.0], [44.5, 3820.0], [44.6, 3840.0], [44.7, 3848.0], [44.8, 3851.0], [44.9, 3864.0], [45.0, 3867.0], [45.1, 3867.0], [45.2, 3871.0], [45.3, 3874.0], [45.4, 3889.0], [45.5, 3889.0], [45.6, 3890.0], [45.7, 3901.0], [45.8, 3907.0], [45.9, 3909.0], [46.0, 3910.0], [46.1, 3918.0], [46.2, 3918.0], [46.3, 3919.0], [46.4, 3928.0], [46.5, 3935.0], [46.6, 3941.0], [46.7, 3944.0], [46.8, 3945.0], [46.9, 3962.0], [47.0, 3964.0], [47.1, 3980.0], [47.2, 3983.0], [47.3, 3996.0], [47.4, 4002.0], [47.5, 4005.0], [47.6, 4008.0], [47.7, 4018.0], [47.8, 4053.0], [47.9, 4084.0], [48.0, 4086.0], [48.1, 4090.0], [48.2, 4094.0], [48.3, 4095.0], [48.4, 4096.0], [48.5, 4099.0], [48.6, 4108.0], [48.7, 4111.0], [48.8, 4112.0], [48.9, 4113.0], [49.0, 4124.0], [49.1, 4128.0], [49.2, 4129.0], [49.3, 4136.0], [49.4, 4139.0], [49.5, 4152.0], [49.6, 4154.0], [49.7, 4158.0], [49.8, 4163.0], [49.9, 4167.0], [50.0, 4174.0], [50.1, 4181.0], [50.2, 4187.0], [50.3, 4196.0], [50.4, 4204.0], [50.5, 4209.0], [50.6, 4211.0], [50.7, 4213.0], [50.8, 4226.0], [50.9, 4227.0], [51.0, 4235.0], [51.1, 4239.0], [51.2, 4248.0], [51.3, 4250.0], [51.4, 4252.0], [51.5, 4252.0], [51.6, 4258.0], [51.7, 4262.0], [51.8, 4267.0], [51.9, 4273.0], [52.0, 4274.0], [52.1, 4282.0], [52.2, 4283.0], [52.3, 4290.0], [52.4, 4293.0], [52.5, 4303.0], [52.6, 4304.0], [52.7, 4308.0], [52.8, 4310.0], [52.9, 4313.0], [53.0, 4318.0], [53.1, 4326.0], [53.2, 4335.0], [53.3, 4337.0], [53.4, 4341.0], [53.5, 4342.0], [53.6, 4353.0], [53.7, 4364.0], [53.8, 4367.0], [53.9, 4369.0], [54.0, 4375.0], [54.1, 4410.0], [54.2, 4424.0], [54.3, 4450.0], [54.4, 4454.0], [54.5, 4459.0], [54.6, 4460.0], [54.7, 4481.0], [54.8, 4505.0], [54.9, 4515.0], [55.0, 4529.0], [55.1, 4536.0], [55.2, 4549.0], [55.3, 4558.0], [55.4, 4563.0], [55.5, 4565.0], [55.6, 4575.0], [55.7, 4577.0], [55.8, 4583.0], [55.9, 4584.0], [56.0, 4589.0], [56.1, 4590.0], [56.2, 4590.0], [56.3, 4593.0], [56.4, 4598.0], [56.5, 4599.0], [56.6, 4608.0], [56.7, 4609.0], [56.8, 4612.0], [56.9, 4614.0], [57.0, 4625.0], [57.1, 4629.0], [57.2, 4630.0], [57.3, 4632.0], [57.4, 4634.0], [57.5, 4635.0], [57.6, 4643.0], [57.7, 4662.0], [57.8, 4670.0], [57.9, 4680.0], [58.0, 4690.0], [58.1, 4691.0], [58.2, 4694.0], [58.3, 4699.0], [58.4, 4705.0], [58.5, 4714.0], [58.6, 4716.0], [58.7, 4732.0], [58.8, 4732.0], [58.9, 4735.0], [59.0, 4736.0], [59.1, 4737.0], [59.2, 4740.0], [59.3, 4744.0], [59.4, 4745.0], [59.5, 4748.0], [59.6, 4753.0], [59.7, 4771.0], [59.8, 4778.0], [59.9, 4780.0], [60.0, 4787.0], [60.1, 4787.0], [60.2, 4788.0], [60.3, 4805.0], [60.4, 4816.0], [60.5, 4830.0], [60.6, 4839.0], [60.7, 4844.0], [60.8, 4847.0], [60.9, 4895.0], [61.0, 4902.0], [61.1, 4923.0], [61.2, 4949.0], [61.3, 4976.0], [61.4, 4988.0], [61.5, 4989.0], [61.6, 5008.0], [61.7, 5026.0], [61.8, 5027.0], [61.9, 5031.0], [62.0, 5037.0], [62.1, 5038.0], [62.2, 5038.0], [62.3, 5043.0], [62.4, 5049.0], [62.5, 5051.0], [62.6, 5051.0], [62.7, 5056.0], [62.8, 5059.0], [62.9, 5061.0], [63.0, 5061.0], [63.1, 5062.0], [63.2, 5063.0], [63.3, 5064.0], [63.4, 5065.0], [63.5, 5075.0], [63.6, 5079.0], [63.7, 5096.0], [63.8, 5096.0], [63.9, 5097.0], [64.0, 5100.0], [64.1, 5109.0], [64.2, 5120.0], [64.3, 5121.0], [64.4, 5124.0], [64.5, 5125.0], [64.6, 5129.0], [64.7, 5130.0], [64.8, 5131.0], [64.9, 5134.0], [65.0, 5139.0], [65.1, 5142.0], [65.2, 5143.0], [65.3, 5143.0], [65.4, 5148.0], [65.5, 5155.0], [65.6, 5159.0], [65.7, 5171.0], [65.8, 5208.0], [65.9, 5208.0], [66.0, 5230.0], [66.1, 5236.0], [66.2, 5242.0], [66.3, 5242.0], [66.4, 5245.0], [66.5, 5248.0], [66.6, 5260.0], [66.7, 5303.0], [66.8, 5307.0], [66.9, 5313.0], [67.0, 5324.0], [67.1, 5333.0], [67.2, 5338.0], [67.3, 5426.0], [67.4, 5433.0], [67.5, 5436.0], [67.6, 5446.0], [67.7, 5447.0], [67.8, 5458.0], [67.9, 5462.0], [68.0, 5464.0], [68.1, 5464.0], [68.2, 5467.0], [68.3, 5479.0], [68.4, 5484.0], [68.5, 5488.0], [68.6, 5489.0], [68.7, 5512.0], [68.8, 5515.0], [68.9, 5519.0], [69.0, 5520.0], [69.1, 5522.0], [69.2, 5525.0], [69.3, 5526.0], [69.4, 5528.0], [69.5, 5530.0], [69.6, 5540.0], [69.7, 5563.0], [69.8, 5570.0], [69.9, 5571.0], [70.0, 5574.0], [70.1, 5644.0], [70.2, 5648.0], [70.3, 5651.0], [70.4, 5653.0], [70.5, 5660.0], [70.6, 5661.0], [70.7, 5661.0], [70.8, 5665.0], [70.9, 5673.0], [71.0, 5675.0], [71.1, 5676.0], [71.2, 5678.0], [71.3, 5681.0], [71.4, 5682.0], [71.5, 5682.0], [71.6, 5691.0], [71.7, 5692.0], [71.8, 5693.0], [71.9, 5695.0], [72.0, 5711.0], [72.1, 5745.0], [72.2, 5762.0], [72.3, 5859.0], [72.4, 5878.0], [72.5, 5890.0], [72.6, 5930.0], [72.7, 5938.0], [72.8, 5945.0], [72.9, 5960.0], [73.0, 6034.0], [73.1, 6053.0], [73.2, 6061.0], [73.3, 6067.0], [73.4, 6067.0], [73.5, 6084.0], [73.6, 6090.0], [73.7, 6100.0], [73.8, 6106.0], [73.9, 6111.0], [74.0, 6113.0], [74.1, 6119.0], [74.2, 6120.0], [74.3, 6121.0], [74.4, 6140.0], [74.5, 6183.0], [74.6, 6235.0], [74.7, 6241.0], [74.8, 6246.0], [74.9, 6252.0], [75.0, 6257.0], [75.1, 6257.0], [75.2, 6259.0], [75.3, 6262.0], [75.4, 6265.0], [75.5, 6269.0], [75.6, 6270.0], [75.7, 6273.0], [75.8, 6277.0], [75.9, 6279.0], [76.0, 6280.0], [76.1, 6284.0], [76.2, 6286.0], [76.3, 6290.0], [76.4, 6294.0], [76.5, 6296.0], [76.6, 6296.0], [76.7, 6298.0], [76.8, 6298.0], [76.9, 6300.0], [77.0, 6303.0], [77.1, 6310.0], [77.2, 6313.0], [77.3, 6313.0], [77.4, 6315.0], [77.5, 6317.0], [77.6, 6318.0], [77.7, 6320.0], [77.8, 6322.0], [77.9, 6322.0], [78.0, 6325.0], [78.1, 6330.0], [78.2, 6332.0], [78.3, 6332.0], [78.4, 6334.0], [78.5, 6334.0], [78.6, 6338.0], [78.7, 6339.0], [78.8, 6342.0], [78.9, 6347.0], [79.0, 6347.0], [79.1, 6354.0], [79.2, 6358.0], [79.3, 6394.0], [79.4, 6410.0], [79.5, 6413.0], [79.6, 6420.0], [79.7, 6422.0], [79.8, 6425.0], [79.9, 6433.0], [80.0, 6436.0], [80.1, 6436.0], [80.2, 6445.0], [80.3, 6449.0], [80.4, 6457.0], [80.5, 6457.0], [80.6, 6463.0], [80.7, 6471.0], [80.8, 6476.0], [80.9, 6486.0], [81.0, 6489.0], [81.1, 6495.0], [81.2, 6495.0], [81.3, 6498.0], [81.4, 6500.0], [81.5, 6525.0], [81.6, 6602.0], [81.7, 6616.0], [81.8, 6638.0], [81.9, 6654.0], [82.0, 6660.0], [82.1, 6669.0], [82.2, 6674.0], [82.3, 6677.0], [82.4, 6714.0], [82.5, 6724.0], [82.6, 6752.0], [82.7, 6765.0], [82.8, 6777.0], [82.9, 6788.0], [83.0, 6789.0], [83.1, 6805.0], [83.2, 6808.0], [83.3, 6825.0], [83.4, 6886.0], [83.5, 6898.0], [83.6, 6900.0], [83.7, 6903.0], [83.8, 6912.0], [83.9, 6915.0], [84.0, 6916.0], [84.1, 6919.0], [84.2, 6923.0], [84.3, 6930.0], [84.4, 6941.0], [84.5, 6951.0], [84.6, 6951.0], [84.7, 6952.0], [84.8, 6960.0], [84.9, 6965.0], [85.0, 6966.0], [85.1, 6971.0], [85.2, 6978.0], [85.3, 6979.0], [85.4, 6983.0], [85.5, 6984.0], [85.6, 6985.0], [85.7, 6988.0], [85.8, 6988.0], [85.9, 6992.0], [86.0, 6995.0], [86.1, 7003.0], [86.2, 7008.0], [86.3, 7009.0], [86.4, 7012.0], [86.5, 7012.0], [86.6, 7014.0], [86.7, 7019.0], [86.8, 7021.0], [86.9, 7023.0], [87.0, 7060.0], [87.1, 7064.0], [87.2, 7070.0], [87.3, 7074.0], [87.4, 7084.0], [87.5, 7105.0], [87.6, 7114.0], [87.7, 7116.0], [87.8, 7131.0], [87.9, 7140.0], [88.0, 7162.0], [88.1, 7176.0], [88.2, 7181.0], [88.3, 7197.0], [88.4, 7211.0], [88.5, 7220.0], [88.6, 7232.0], [88.7, 7233.0], [88.8, 7237.0], [88.9, 7237.0], [89.0, 7239.0], [89.1, 7243.0], [89.2, 7244.0], [89.3, 7245.0], [89.4, 7271.0], [89.5, 7283.0], [89.6, 7299.0], [89.7, 7300.0], [89.8, 7306.0], [89.9, 7318.0], [90.0, 7319.0], [90.1, 7320.0], [90.2, 7324.0], [90.3, 7324.0], [90.4, 7355.0], [90.5, 7356.0], [90.6, 7427.0], [90.7, 7428.0], [90.8, 7430.0], [90.9, 7436.0], [91.0, 7444.0], [91.1, 7462.0], [91.2, 7465.0], [91.3, 7498.0], [91.4, 7499.0], [91.5, 7516.0], [91.6, 7518.0], [91.7, 7524.0], [91.8, 7531.0], [91.9, 7553.0], [92.0, 7572.0], [92.1, 7573.0], [92.2, 7611.0], [92.3, 7659.0], [92.4, 7671.0], [92.5, 7720.0], [92.6, 7735.0], [92.7, 7740.0], [92.8, 7749.0], [92.9, 7752.0], [93.0, 7754.0], [93.1, 7755.0], [93.2, 7764.0], [93.3, 7805.0], [93.4, 7829.0], [93.5, 7901.0], [93.6, 7902.0], [93.7, 7908.0], [93.8, 7914.0], [93.9, 7914.0], [94.0, 7917.0], [94.1, 7917.0], [94.2, 7918.0], [94.3, 7925.0], [94.4, 7935.0], [94.5, 7944.0], [94.6, 7952.0], [94.7, 7956.0], [94.8, 7960.0], [94.9, 7965.0], [95.0, 7968.0], [95.1, 7986.0], [95.2, 7999.0], [95.3, 8017.0], [95.4, 8021.0], [95.5, 8048.0], [95.6, 8067.0], [95.7, 8068.0], [95.8, 8072.0], [95.9, 8080.0], [96.0, 8089.0], [96.1, 8097.0], [96.2, 8120.0], [96.3, 8142.0], [96.4, 8151.0], [96.5, 8158.0], [96.6, 8159.0], [96.7, 8163.0], [96.8, 8164.0], [96.9, 8172.0], [97.0, 8179.0], [97.1, 8182.0], [97.2, 8186.0], [97.3, 8195.0], [97.4, 8199.0], [97.5, 8202.0], [97.6, 8206.0], [97.7, 8216.0], [97.8, 8217.0], [97.9, 8228.0], [98.0, 8230.0], [98.1, 8232.0], [98.2, 8242.0], [98.3, 8264.0], [98.4, 8270.0], [98.5, 8274.0], [98.6, 8282.0], [98.7, 8302.0], [98.8, 8330.0], [98.9, 8422.0], [99.0, 8502.0], [99.1, 8550.0], [99.2, 8576.0], [99.3, 8611.0], [99.4, 8619.0], [99.5, 8654.0], [99.6, 8722.0], [99.7, 8743.0], [99.8, 8767.0], [99.9, 8860.0]], "isOverall": false, "label": "Test", "isController": true}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 700.0, "maxY": 41.0, "series": [{"data": [[700.0, 35.0], [800.0, 24.0], [1100.0, 5.0], [1200.0, 7.0], [1300.0, 41.0], [1400.0, 8.0], [1500.0, 1.0], [1600.0, 6.0], [1700.0, 20.0], [1800.0, 28.0], [1900.0, 7.0], [2000.0, 6.0], [2100.0, 9.0], [2200.0, 32.0], [2300.0, 16.0], [2400.0, 6.0], [2500.0, 7.0], [2600.0, 27.0], [2700.0, 17.0], [2800.0, 8.0], [2900.0, 12.0], [3000.0, 34.0], [3100.0, 15.0], [3200.0, 9.0], [3300.0, 8.0], [3400.0, 16.0], [3500.0, 9.0], [3600.0, 11.0], [3700.0, 17.0], [3800.0, 15.0], [3900.0, 17.0], [4000.0, 12.0], [4100.0, 18.0], [4200.0, 21.0], [4300.0, 16.0], [4400.0, 7.0], [4500.0, 18.0], [4600.0, 18.0], [4700.0, 19.0], [4800.0, 7.0], [4900.0, 6.0], [5000.0, 24.0], [5100.0, 18.0], [5200.0, 9.0], [5300.0, 6.0], [5400.0, 14.0], [5500.0, 14.0], [5600.0, 19.0], [5700.0, 3.0], [5800.0, 3.0], [5900.0, 4.0], [6000.0, 7.0], [6100.0, 9.0], [6200.0, 24.0], [6300.0, 25.0], [6400.0, 20.0], [6500.0, 2.0], [6600.0, 8.0], [6700.0, 7.0], [6800.0, 5.0], [6900.0, 25.0], [7000.0, 14.0], [7100.0, 9.0], [7200.0, 13.0], [7300.0, 9.0], [7400.0, 9.0], [7500.0, 7.0], [7600.0, 3.0], [7900.0, 18.0], [7700.0, 8.0], [7800.0, 2.0], [8000.0, 9.0], [8100.0, 13.0], [8200.0, 12.0], [8300.0, 2.0], [8400.0, 1.0], [8500.0, 3.0], [8600.0, 3.0], [8700.0, 3.0], [8800.0, 1.0]], "isOverall": false, "label": "https://superset.m-net.in/bi/site/site1/dashboards/6265efb8-258f-4ad5-9461-7a952c6df353/spends%20roi/tv%20spends?showmydashboards=1", "isController": false}, {"data": [[700.0, 35.0], [800.0, 24.0], [1100.0, 5.0], [1200.0, 7.0], [1300.0, 41.0], [1400.0, 8.0], [1500.0, 1.0], [1600.0, 6.0], [1700.0, 20.0], [1800.0, 28.0], [1900.0, 7.0], [2000.0, 6.0], [2100.0, 9.0], [2200.0, 32.0], [2300.0, 16.0], [2400.0, 6.0], [2500.0, 7.0], [2600.0, 27.0], [2700.0, 17.0], [2800.0, 8.0], [2900.0, 12.0], [3000.0, 34.0], [3100.0, 15.0], [3200.0, 9.0], [3300.0, 8.0], [3400.0, 16.0], [3500.0, 9.0], [3600.0, 11.0], [3700.0, 17.0], [3800.0, 15.0], [3900.0, 17.0], [4000.0, 12.0], [4100.0, 18.0], [4200.0, 21.0], [4300.0, 16.0], [4400.0, 7.0], [4500.0, 18.0], [4600.0, 18.0], [4700.0, 19.0], [4800.0, 7.0], [4900.0, 6.0], [5000.0, 24.0], [5100.0, 18.0], [5200.0, 9.0], [5300.0, 6.0], [5400.0, 14.0], [5500.0, 14.0], [5600.0, 19.0], [5700.0, 3.0], [5800.0, 3.0], [5900.0, 4.0], [6000.0, 7.0], [6100.0, 9.0], [6200.0, 24.0], [6300.0, 25.0], [6400.0, 20.0], [6500.0, 2.0], [6600.0, 8.0], [6700.0, 7.0], [6800.0, 5.0], [6900.0, 25.0], [7000.0, 14.0], [7100.0, 9.0], [7200.0, 13.0], [7300.0, 9.0], [7400.0, 9.0], [7500.0, 7.0], [7600.0, 3.0], [7900.0, 18.0], [7700.0, 8.0], [7800.0, 2.0], [8000.0, 9.0], [8100.0, 13.0], [8200.0, 12.0], [8300.0, 2.0], [8400.0, 1.0], [8500.0, 3.0], [8600.0, 3.0], [8700.0, 3.0], [8800.0, 1.0]], "isOverall": false, "label": "Test", "isController": true}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 8800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 120.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 880.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 120.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 880.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 231.23861171366605, "minX": 1.73079954E12, "maxY": 453.6666666666667, "series": [{"data": [[1.73079954E12, 453.6666666666667], [1.7307996E12, 231.23861171366605], [1.73079966E12, 242.4659999999994]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73079966E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1253.0, "minX": 1.0, "maxY": 8502.0, "series": [{"data": [[2.0, 7352.5], [3.0, 7252.5], [4.0, 7207.0], [5.0, 7157.0], [6.0, 7165.0], [7.0, 7152.0], [8.0, 7135.5], [9.0, 7113.0], [10.0, 8502.0], [11.0, 6446.333333333333], [12.0, 6804.5], [13.0, 6807.5], [14.0, 6783.0], [15.0, 6834.0], [16.0, 6746.0], [17.0, 6747.0], [18.0, 6725.5], [19.0, 6715.0], [20.0, 6649.5], [21.0, 6647.5], [22.0, 6685.0], [23.0, 6621.0], [24.0, 5155.0], [25.0, 7169.0], [26.0, 6613.5], [27.0, 6647.5], [28.0, 6518.0], [29.0, 6510.5], [30.0, 6610.0], [31.0, 8217.0], [33.0, 6584.5], [32.0, 5989.0], [35.0, 6620.5], [34.0, 6494.0], [37.0, 6475.5], [36.0, 6438.0], [39.0, 6483.5], [38.0, 6533.5], [41.0, 4735.0], [40.0, 4740.0], [43.0, 4694.0], [42.0, 4732.0], [45.0, 4778.0], [44.0, 4736.0], [47.0, 4670.0], [46.0, 4680.0], [49.0, 8066.4], [48.0, 4691.0], [51.0, 6323.5], [50.0, 5863.0], [53.0, 6327.0], [52.0, 6408.0], [54.0, 6268.5], [55.0, 4632.0], [57.0, 5724.333333333333], [56.0, 7935.0], [59.0, 6220.5], [58.0, 6256.0], [61.0, 6321.5], [60.0, 6315.0], [63.0, 6227.0], [62.0, 6305.0], [66.0, 5613.0], [65.0, 7752.0], [64.0, 6280.0], [67.0, 4529.0], [71.0, 6162.5], [70.0, 5604.333333333333], [69.0, 7952.0], [68.0, 6716.333333333333], [75.0, 6107.0], [74.0, 6056.5], [73.0, 6209.5], [72.0, 6090.0], [79.0, 5943.0], [78.0, 6023.0], [77.0, 5976.5], [76.0, 6147.0], [81.0, 5914.5], [80.0, 5917.5], [82.0, 4424.0], [87.0, 5850.5], [86.0, 5892.5], [85.0, 6409.0], [84.0, 4326.0], [90.0, 5896.0], [89.0, 5894.0], [88.0, 5882.5], [91.0, 4250.0], [95.0, 5832.0], [94.0, 5772.5], [93.0, 5910.0], [92.0, 6329.666666666667], [99.0, 5766.5], [98.0, 5819.0], [97.0, 5754.0], [96.0, 5896.0], [103.0, 5228.333333333333], [102.0, 7233.0], [101.0, 5849.0], [100.0, 5732.0], [107.0, 7239.0], [106.0, 6203.333333333333], [104.0, 5789.0], [105.0, 4136.0], [111.0, 5717.0], [110.0, 5658.0], [109.0, 5698.0], [108.0, 5227.333333333333], [115.0, 5607.5], [114.0, 5720.5], [113.0, 5766.5], [112.0, 5757.0], [118.0, 5617.5], [117.0, 5591.5], [116.0, 5590.5], [119.0, 3945.0], [123.0, 6636.833333333334], [122.0, 3935.0], [121.0, 4008.0], [120.0, 3941.0], [127.0, 5451.5], [126.0, 5494.0], [125.0, 5451.0], [124.0, 5517.5], [135.0, 5479.0], [134.0, 5443.5], [133.0, 5483.0], [131.0, 5456.5], [130.0, 5482.0], [129.0, 5524.0], [128.0, 5485.5], [143.0, 5429.0], [142.0, 5398.0], [141.0, 5449.0], [140.0, 5384.0], [139.0, 5416.0], [138.0, 5443.0], [137.0, 5423.0], [136.0, 5470.5], [151.0, 5862.333333333333], [149.0, 5439.0], [148.0, 5349.5], [147.0, 5341.0], [146.0, 5923.0], [144.0, 5440.0], [150.0, 3794.0], [145.0, 3790.0], [158.0, 5342.0], [157.0, 5870.666666666667], [156.0, 5377.5], [155.0, 5402.0], [153.0, 5407.0], [152.0, 5416.0], [159.0, 3671.0], [154.0, 3733.0], [167.0, 5160.5], [166.0, 5262.0], [165.0, 5240.0], [164.0, 5235.5], [163.0, 5275.5], [162.0, 5259.5], [161.0, 5322.5], [160.0, 5829.666666666667], [175.0, 5096.0], [174.0, 5666.333333333333], [172.0, 5126.5], [171.0, 5167.5], [170.0, 5135.5], [169.0, 5155.0], [168.0, 5175.0], [173.0, 3479.0], [183.0, 5013.5], [182.0, 5042.5], [181.0, 5054.5], [180.0, 5047.5], [179.0, 5059.5], [178.0, 5061.0], [177.0, 5093.5], [176.0, 5096.0], [191.0, 4881.0], [190.0, 4344.666666666667], [189.0, 6471.0], [188.0, 4894.0], [187.0, 4911.5], [186.0, 4944.5], [185.0, 4954.0], [184.0, 5008.0], [199.0, 4776.0], [198.0, 4786.5], [197.0, 4784.5], [196.0, 4794.5], [195.0, 4796.5], [194.0, 4829.5], [193.0, 4824.5], [192.0, 4824.5], [207.0, 6320.0], [206.0, 4757.0], [205.0, 4755.0], [204.0, 4745.0], [203.0, 4750.0], [202.0, 5317.666666666667], [200.0, 4768.5], [201.0, 3104.0], [215.0, 6313.0], [214.0, 4696.5], [213.0, 4696.5], [212.0, 5243.333333333333], [210.0, 4717.0], [209.0, 4716.5], [208.0, 4160.666666666667], [211.0, 3071.0], [222.0, 4699.5], [221.0, 6315.0], [220.0, 4724.0], [219.0, 4137.0], [218.0, 6318.0], [217.0, 4674.0], [216.0, 4151.333333333333], [223.0, 3043.0], [231.0, 4659.0], [230.0, 4660.5], [229.0, 4673.5], [228.0, 4661.5], [227.0, 4660.0], [226.0, 4637.5], [225.0, 5485.0], [224.0, 3036.0], [239.0, 5179.0], [237.0, 4634.5], [236.0, 4650.5], [235.0, 4645.5], [234.0, 4668.0], [233.0, 4666.5], [232.0, 4664.5], [238.0, 2967.0], [247.0, 4533.0], [246.0, 3980.6666666666665], [245.0, 6334.0], [244.0, 4576.5], [243.0, 4589.0], [242.0, 4616.5], [241.0, 5153.666666666667], [240.0, 2951.0], [255.0, 4492.0], [254.0, 4489.0], [253.0, 5557.4], [249.0, 4506.5], [248.0, 4499.0], [252.0, 2735.5], [250.0, 2736.0], [270.0, 4934.666666666667], [271.0, 4311.0], [268.0, 6084.0], [269.0, 2668.5], [259.0, 4416.0], [258.0, 4415.0], [257.0, 3856.0], [256.0, 6183.0], [267.0, 4363.5], [266.0, 3833.0], [265.0, 6110.0], [264.0, 2682.0], [263.0, 4365.0], [262.0, 4393.0], [261.0, 4385.5], [260.0, 4407.5], [286.0, 4142.5], [287.0, 4142.0], [285.0, 4144.0], [284.0, 4152.5], [283.0, 4140.5], [282.0, 4158.5], [281.0, 4660.666666666667], [280.0, 2635.0], [279.0, 4158.0], [273.0, 4282.0], [272.0, 4299.0], [275.0, 4262.0], [274.0, 4264.0], [278.0, 4163.5], [277.0, 4185.5], [276.0, 4247.0], [291.0, 4091.5], [302.0, 3928.5], [303.0, 3920.0], [301.0, 4990.333333333333], [300.0, 2326.0], [296.0, 4007.0], [299.0, 2385.0], [298.0, 2444.0], [297.0, 2464.0], [295.0, 4021.5], [294.0, 3536.0], [293.0, 5571.0], [292.0, 4043.5], [290.0, 4094.5], [289.0, 4109.0], [288.0, 4124.5], [318.0, 3791.0], [319.0, 3751.0], [317.0, 3844.5], [316.0, 3849.0], [315.0, 3862.0], [314.0, 3870.0], [313.0, 3861.5], [312.0, 3333.0], [311.0, 5458.0], [305.0, 3917.0], [304.0, 3912.5], [307.0, 5488.0], [306.0, 3907.0], [310.0, 3874.0], [309.0, 3885.0], [308.0, 3345.3333333333335], [334.0, 3665.5], [335.0, 3671.5], [333.0, 3663.5], [332.0, 3675.0], [331.0, 4157.666666666667], [330.0, 2206.0], [329.0, 3668.5], [328.0, 4163.333333333333], [326.0, 3680.0], [327.0, 2218.0], [321.0, 3732.5], [320.0, 3746.0], [323.0, 3701.0], [322.0, 3717.5], [325.0, 3683.0], [324.0, 3701.5], [350.0, 3532.5], [351.0, 3499.5], [349.0, 3543.5], [348.0, 3062.3333333333335], [347.0, 5063.0], [346.0, 2096.0], [345.0, 3576.5], [344.0, 4079.0], [342.0, 5063.0], [336.0, 3661.0], [343.0, 2161.5], [338.0, 3642.5], [339.0, 2192.0], [337.0, 3652.0], [341.0, 3609.0], [340.0, 4118.333333333333], [366.0, 3275.0], [367.0, 3285.5], [365.0, 3297.0], [364.0, 2822.0], [363.0, 4771.0], [362.0, 3316.5], [361.0, 3323.5], [360.0, 3334.0], [359.0, 3379.0], [353.0, 3447.5], [352.0, 3476.0], [355.0, 3461.0], [354.0, 3461.0], [358.0, 3435.5], [357.0, 2535.0], [356.0, 3457.0], [382.0, 1434.7142857142856], [381.0, 2350.0], [383.0, 2347.6666666666665], [380.0, 2370.3333333333335], [379.0, 1736.4], [378.0, 3182.0], [377.0, 3654.0], [376.0, 1813.0], [375.0, 1737.6], [369.0, 3271.0], [368.0, 3269.5], [371.0, 3232.5], [370.0, 2407.3333333333335], [374.0, 3202.0], [373.0, 3218.0], [372.0, 3232.0], [398.0, 1853.75], [385.0, 1957.0], [384.0, 3092.0], [386.0, 1899.2], [391.0, 4252.0], [390.0, 3015.0], [389.0, 1714.8], [388.0, 1920.5], [387.0, 1906.75], [394.0, 1427.4285714285713], [393.0, 1668.6], [399.0, 2466.5], [392.0, 1698.6666666666667], [397.0, 2205.3333333333335], [396.0, 2197.0], [395.0, 1655.6], [414.0, 1680.0], [415.0, 1994.6666666666667], [413.0, 3800.0], [412.0, 2641.0], [411.0, 1999.3333333333333], [410.0, 2214.6666666666665], [409.0, 3928.0], [408.0, 2077.6666666666665], [407.0, 2733.0], [400.0, 1612.0], [403.0, 3207.0], [402.0, 1392.0], [401.0, 2634.5], [406.0, 2734.0], [405.0, 2090.0], [404.0, 2099.6666666666665], [430.0, 2358.5], [431.0, 2334.5], [429.0, 2396.5], [428.0, 2403.5], [427.0, 2403.0], [426.0, 2409.5], [425.0, 2115.6666666666665], [424.0, 3646.0], [423.0, 2891.6666666666665], [419.0, 2542.0], [418.0, 2553.5], [417.0, 2572.0], [416.0, 1319.0], [421.0, 2902.6666666666665], [420.0, 1348.0], [422.0, 1333.0], [446.0, 2066.5], [447.0, 2962.0], [445.0, 2136.0], [444.0, 2113.0], [443.0, 2155.5], [442.0, 2231.0], [441.0, 2275.0], [440.0, 1929.6666666666667], [439.0, 3192.0], [433.0, 2315.5], [432.0, 2338.0], [435.0, 2310.0], [434.0, 2325.0], [438.0, 2250.5], [437.0, 1974.3333333333333], [436.0, 3259.0], [462.0, 2329.0], [463.0, 2321.0], [461.0, 2371.0], [460.0, 2379.0], [459.0, 2396.0], [458.0, 2449.0], [457.0, 2393.0], [456.0, 2483.0], [455.0, 2786.0], [449.0, 2044.0], [448.0, 1766.0], [451.0, 1961.0], [450.0, 2020.5], [454.0, 2741.0], [453.0, 2844.0], [452.0, 2879.0], [478.0, 1833.0], [479.0, 1796.0], [477.0, 1801.0], [466.0, 2305.0], [465.0, 2286.0], [464.0, 2342.0], [475.0, 1774.0], [474.0, 1831.0], [473.0, 1845.0], [472.0, 1960.0], [471.0, 1931.0], [469.0, 1970.0], [468.0, 2209.0], [490.0, 1253.0], [489.0, 1294.0], [488.0, 1284.0], [487.0, 1321.0], [486.0, 1286.5], [484.0, 1380.0], [483.0, 1373.0], [481.0, 1409.0], [480.0, 1431.0], [1.0, 7447.0]], "isOverall": false, "label": "https://superset.m-net.in/bi/site/site1/dashboards/6265efb8-258f-4ad5-9461-7a952c6df353/spends%20roi/tv%20spends?showmydashboards=1", "isController": false}, {"data": [[245.52699999999973, 4292.00100000001]], "isOverall": false, "label": "https://superset.m-net.in/bi/site/site1/dashboards/6265efb8-258f-4ad5-9461-7a952c6df353/spends%20roi/tv%20spends?showmydashboards=1-Aggregated", "isController": false}, {"data": [[2.0, 7352.5], [3.0, 7252.5], [4.0, 7207.0], [5.0, 7157.0], [6.0, 7165.0], [7.0, 7152.0], [8.0, 7135.5], [9.0, 7113.0], [10.0, 8502.0], [11.0, 6446.333333333333], [12.0, 6804.5], [13.0, 6807.5], [14.0, 6783.0], [15.0, 6834.0], [16.0, 6746.0], [17.0, 6747.0], [18.0, 6725.5], [19.0, 6715.0], [20.0, 6649.5], [21.0, 6647.5], [22.0, 6685.0], [23.0, 6621.0], [24.0, 5155.0], [25.0, 7169.0], [26.0, 6613.5], [27.0, 6647.5], [28.0, 6518.0], [29.0, 6510.5], [30.0, 6610.0], [31.0, 8217.0], [33.0, 6584.5], [32.0, 5989.0], [35.0, 6620.5], [34.0, 6494.0], [37.0, 6475.5], [36.0, 6438.0], [39.0, 6483.5], [38.0, 6533.5], [41.0, 4735.0], [40.0, 4740.0], [43.0, 4694.0], [42.0, 4732.0], [45.0, 4778.0], [44.0, 4736.0], [47.0, 4670.0], [46.0, 4680.0], [49.0, 8066.4], [48.0, 4691.0], [51.0, 6323.5], [50.0, 5863.0], [53.0, 6327.0], [52.0, 6408.0], [54.0, 6268.5], [55.0, 4632.0], [57.0, 5724.333333333333], [56.0, 7935.0], [59.0, 6220.5], [58.0, 6256.0], [61.0, 6321.5], [60.0, 6315.0], [63.0, 6227.0], [62.0, 6305.0], [66.0, 5613.0], [65.0, 7752.0], [64.0, 6280.0], [67.0, 4529.0], [71.0, 6162.5], [70.0, 5604.333333333333], [69.0, 7952.0], [68.0, 6716.333333333333], [75.0, 6107.0], [74.0, 6056.5], [73.0, 6209.5], [72.0, 6090.0], [79.0, 5943.0], [78.0, 6023.0], [77.0, 5976.5], [76.0, 6147.0], [81.0, 5914.5], [80.0, 5917.5], [82.0, 4424.0], [87.0, 5850.5], [86.0, 5892.5], [85.0, 6409.0], [84.0, 4326.0], [90.0, 5896.0], [89.0, 5894.0], [88.0, 5882.5], [91.0, 4250.0], [95.0, 5832.0], [94.0, 5772.5], [93.0, 5910.0], [92.0, 6329.666666666667], [99.0, 5766.5], [98.0, 5819.0], [97.0, 5754.0], [96.0, 5896.0], [103.0, 5228.333333333333], [102.0, 7233.0], [101.0, 5849.0], [100.0, 5732.0], [107.0, 7239.0], [106.0, 6203.333333333333], [104.0, 5789.0], [105.0, 4136.0], [111.0, 5717.0], [110.0, 5658.0], [109.0, 5698.0], [108.0, 5227.333333333333], [115.0, 5607.5], [114.0, 5720.5], [113.0, 5766.5], [112.0, 5757.0], [118.0, 5617.5], [117.0, 5591.5], [116.0, 5590.5], [119.0, 3945.0], [123.0, 6636.833333333334], [122.0, 3935.0], [121.0, 4008.0], [120.0, 3941.0], [127.0, 5451.5], [126.0, 5494.0], [125.0, 5451.0], [124.0, 5517.5], [135.0, 5479.0], [134.0, 5443.5], [133.0, 5483.0], [131.0, 5456.5], [130.0, 5482.0], [129.0, 5524.0], [128.0, 5485.5], [143.0, 5429.0], [142.0, 5398.0], [141.0, 5449.0], [140.0, 5384.0], [139.0, 5416.0], [138.0, 5443.0], [137.0, 5423.0], [136.0, 5470.5], [151.0, 5862.333333333333], [149.0, 5439.0], [148.0, 5349.5], [147.0, 5341.0], [146.0, 5923.0], [144.0, 5440.0], [150.0, 3794.0], [145.0, 3790.0], [158.0, 5342.0], [157.0, 5870.666666666667], [156.0, 5377.5], [155.0, 5402.0], [153.0, 5407.0], [152.0, 5416.0], [159.0, 3671.0], [154.0, 3733.0], [167.0, 5160.5], [166.0, 5262.0], [165.0, 5240.0], [164.0, 5235.5], [163.0, 5275.5], [162.0, 5259.5], [161.0, 5322.5], [160.0, 5829.666666666667], [175.0, 5096.0], [174.0, 5666.333333333333], [172.0, 5126.5], [171.0, 5167.5], [170.0, 5135.5], [169.0, 5155.0], [168.0, 5175.0], [173.0, 3479.0], [183.0, 5013.5], [182.0, 5042.5], [181.0, 5054.5], [180.0, 5047.5], [179.0, 5059.5], [178.0, 5061.0], [177.0, 5093.5], [176.0, 5096.0], [191.0, 4881.0], [190.0, 4344.666666666667], [189.0, 6471.0], [188.0, 4894.0], [187.0, 4911.5], [186.0, 4944.5], [185.0, 4954.0], [184.0, 5008.0], [199.0, 4776.0], [198.0, 4786.5], [197.0, 4784.5], [196.0, 4794.5], [195.0, 4796.5], [194.0, 4829.5], [193.0, 4824.5], [192.0, 4824.5], [207.0, 6320.0], [206.0, 4757.0], [205.0, 4755.0], [204.0, 4745.0], [203.0, 4750.0], [202.0, 5317.666666666667], [200.0, 4768.5], [201.0, 3104.0], [215.0, 6313.0], [214.0, 4696.5], [213.0, 4696.5], [212.0, 5243.333333333333], [210.0, 4717.0], [209.0, 4716.5], [208.0, 4160.666666666667], [211.0, 3071.0], [222.0, 4699.5], [221.0, 6315.0], [220.0, 4724.0], [219.0, 4137.0], [218.0, 6318.0], [217.0, 4674.0], [216.0, 4151.333333333333], [223.0, 3043.0], [231.0, 4659.0], [230.0, 4660.5], [229.0, 4673.5], [228.0, 4661.5], [227.0, 4660.0], [226.0, 4637.5], [225.0, 5485.0], [224.0, 3036.0], [239.0, 5179.0], [237.0, 4634.5], [236.0, 4650.5], [235.0, 4645.5], [234.0, 4668.0], [233.0, 4666.5], [232.0, 4664.5], [238.0, 2967.0], [247.0, 4533.0], [246.0, 3980.6666666666665], [245.0, 6334.0], [244.0, 4576.5], [243.0, 4589.0], [242.0, 4616.5], [241.0, 5153.666666666667], [240.0, 2951.0], [255.0, 4492.0], [254.0, 4489.0], [253.0, 5557.4], [249.0, 4506.5], [248.0, 4499.0], [252.0, 2735.5], [250.0, 2736.0], [270.0, 4934.666666666667], [271.0, 4311.0], [268.0, 6084.0], [269.0, 2668.5], [259.0, 4416.0], [258.0, 4415.0], [257.0, 3856.0], [256.0, 6183.0], [267.0, 4363.5], [266.0, 3833.0], [265.0, 6110.0], [264.0, 2682.0], [263.0, 4365.0], [262.0, 4393.0], [261.0, 4385.5], [260.0, 4407.5], [286.0, 4142.5], [287.0, 4142.0], [285.0, 4144.0], [284.0, 4152.5], [283.0, 4140.5], [282.0, 4158.5], [281.0, 4660.666666666667], [280.0, 2635.0], [279.0, 4158.0], [273.0, 4282.0], [272.0, 4299.0], [275.0, 4262.0], [274.0, 4264.0], [278.0, 4163.5], [277.0, 4185.5], [276.0, 4247.0], [291.0, 4091.5], [302.0, 3928.5], [303.0, 3920.0], [301.0, 4990.333333333333], [300.0, 2326.0], [296.0, 4007.0], [299.0, 2385.0], [298.0, 2444.0], [297.0, 2464.0], [295.0, 4021.5], [294.0, 3536.0], [293.0, 5571.0], [292.0, 4043.5], [290.0, 4094.5], [289.0, 4109.0], [288.0, 4124.5], [318.0, 3791.0], [319.0, 3751.0], [317.0, 3844.5], [316.0, 3849.0], [315.0, 3862.0], [314.0, 3870.0], [313.0, 3861.5], [312.0, 3333.0], [311.0, 5458.0], [305.0, 3917.0], [304.0, 3912.5], [307.0, 5488.0], [306.0, 3907.0], [310.0, 3874.0], [309.0, 3885.0], [308.0, 3345.3333333333335], [334.0, 3665.5], [335.0, 3671.5], [333.0, 3663.5], [332.0, 3675.0], [331.0, 4157.666666666667], [330.0, 2206.0], [329.0, 3668.5], [328.0, 4163.333333333333], [326.0, 3680.0], [327.0, 2218.0], [321.0, 3732.5], [320.0, 3746.0], [323.0, 3701.0], [322.0, 3717.5], [325.0, 3683.0], [324.0, 3701.5], [350.0, 3532.5], [351.0, 3499.5], [349.0, 3543.5], [348.0, 3062.3333333333335], [347.0, 5063.0], [346.0, 2096.0], [345.0, 3576.5], [344.0, 4079.0], [342.0, 5063.0], [336.0, 3661.0], [343.0, 2161.5], [338.0, 3642.5], [339.0, 2192.0], [337.0, 3652.0], [341.0, 3609.0], [340.0, 4118.333333333333], [366.0, 3275.0], [367.0, 3285.5], [365.0, 3297.0], [364.0, 2822.0], [363.0, 4771.0], [362.0, 3316.5], [361.0, 3323.5], [360.0, 3334.0], [359.0, 3379.0], [353.0, 3447.5], [352.0, 3476.0], [355.0, 3461.0], [354.0, 3461.0], [358.0, 3435.5], [357.0, 2535.0], [356.0, 3457.0], [382.0, 1434.7142857142856], [381.0, 2350.0], [383.0, 2347.6666666666665], [380.0, 2370.3333333333335], [379.0, 1736.4], [378.0, 3182.0], [377.0, 3654.0], [376.0, 1813.0], [375.0, 1737.6], [369.0, 3271.0], [368.0, 3269.5], [371.0, 3232.5], [370.0, 2407.3333333333335], [374.0, 3202.0], [373.0, 3218.0], [372.0, 3232.0], [398.0, 1853.75], [385.0, 1957.0], [384.0, 3092.0], [386.0, 1899.2], [391.0, 4252.0], [390.0, 3015.0], [389.0, 1714.8], [388.0, 1920.5], [387.0, 1906.75], [394.0, 1427.4285714285713], [393.0, 1668.6], [399.0, 2466.5], [392.0, 1698.6666666666665], [397.0, 2205.3333333333335], [396.0, 2197.0], [395.0, 1655.6], [414.0, 1680.0], [415.0, 1994.6666666666667], [413.0, 3800.0], [412.0, 2641.0], [411.0, 1999.3333333333333], [410.0, 2214.6666666666665], [409.0, 3928.0], [408.0, 2077.6666666666665], [407.0, 2733.0], [400.0, 1612.0], [403.0, 3207.0], [402.0, 1392.0], [401.0, 2634.5], [406.0, 2734.0], [405.0, 2090.0], [404.0, 2099.6666666666665], [430.0, 2358.5], [431.0, 2334.5], [429.0, 2396.5], [428.0, 2403.5], [427.0, 2403.0], [426.0, 2409.5], [425.0, 2115.6666666666665], [424.0, 3646.0], [423.0, 2891.6666666666665], [419.0, 2542.0], [418.0, 2553.5], [417.0, 2572.0], [416.0, 1319.0000000000002], [421.0, 2902.6666666666665], [420.0, 1348.0], [422.0, 1333.0], [446.0, 2066.5], [447.0, 2962.0], [445.0, 2136.0], [444.0, 2113.0], [443.0, 2155.5], [442.0, 2231.0], [441.0, 2275.0], [440.0, 1929.6666666666667], [439.0, 3192.0], [433.0, 2315.5], [432.0, 2338.0], [435.0, 2310.0], [434.0, 2325.0], [438.0, 2250.5], [437.0, 1974.3333333333333], [436.0, 3259.0], [462.0, 2329.0], [463.0, 2321.0], [461.0, 2371.0], [460.0, 2379.0], [459.0, 2396.0], [458.0, 2449.0], [457.0, 2393.0], [456.0, 2483.0], [455.0, 2786.0], [449.0, 2044.0], [448.0, 1766.0], [451.0, 1961.0], [450.0, 2020.5], [454.0, 2741.0], [453.0, 2844.0], [452.0, 2879.0], [478.0, 1833.0], [479.0, 1796.0], [477.0, 1801.0], [466.0, 2305.0], [465.0, 2286.0], [464.0, 2342.0], [475.0, 1774.0], [474.0, 1831.0], [473.0, 1845.0], [472.0, 1960.0], [471.0, 1931.0], [469.0, 1970.0], [468.0, 2209.0], [490.0, 1253.0], [489.0, 1294.0], [488.0, 1284.0], [487.0, 1321.0], [486.0, 1286.5], [484.0, 1380.0], [483.0, 1373.0], [481.0, 1409.0], [480.0, 1431.0], [1.0, 7447.0]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[245.52699999999973, 4292.0010000000075]], "isOverall": false, "label": "Test-Aggregated", "isController": true}], "supportsControllersDiscrimination": true, "maxX": 490.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 391.95, "minX": 1.73079954E12, "maxY": 175025.0, "series": [{"data": [[1.73079954E12, 13651.95], [1.7307996E12, 161373.05], [1.73079966E12, 175025.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.73079954E12, 391.95], [1.7307996E12, 4633.05], [1.73079966E12, 5025.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73079966E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1505.051282051282, "minX": 1.73079954E12, "maxY": 6056.882863340562, "series": [{"data": [[1.73079954E12, 1505.051282051282], [1.7307996E12, 6056.882863340561], [1.73079966E12, 2882.1620000000003]], "isOverall": false, "label": "https://superset.m-net.in/bi/site/site1/dashboards/6265efb8-258f-4ad5-9461-7a952c6df353/spends%20roi/tv%20spends?showmydashboards=1", "isController": false}, {"data": [[1.73079954E12, 1505.051282051282], [1.7307996E12, 6056.882863340562], [1.73079966E12, 2882.1620000000003]], "isOverall": false, "label": "Test", "isController": true}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73079966E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1342.820512820513, "minX": 1.73079954E12, "maxY": 5862.05856832972, "series": [{"data": [[1.73079954E12, 1342.820512820513], [1.7307996E12, 5862.05856832972], [1.73079966E12, 2679.29]], "isOverall": false, "label": "https://superset.m-net.in/bi/site/site1/dashboards/6265efb8-258f-4ad5-9461-7a952c6df353/spends%20roi/tv%20spends?showmydashboards=1", "isController": false}, {"data": [[1.73079954E12, 1342.820512820513], [1.7307996E12, 5862.0585683297195], [1.73079966E12, 2679.29]], "isOverall": false, "label": "Test", "isController": true}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73079966E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1134.076923076923, "minX": 1.73079954E12, "maxY": 5447.284164859002, "series": [{"data": [[1.73079954E12, 1134.076923076923], [1.7307996E12, 5447.284164859002], [1.73079966E12, 2423.4100000000008]], "isOverall": false, "label": "https://superset.m-net.in/bi/site/site1/dashboards/6265efb8-258f-4ad5-9461-7a952c6df353/spends%20roi/tv%20spends?showmydashboards=1", "isController": false}, {"data": [[1.73079954E12, 1134.076923076923], [1.7307996E12, 5447.284164859002], [1.73079966E12, 2423.4100000000008]], "isOverall": false, "label": "Test", "isController": true}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73079966E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 707.0, "minX": 1.73079954E12, "maxY": 8860.0, "series": [{"data": [[1.73079954E12, 2342.0], [1.7307996E12, 8860.0], [1.73079966E12, 6034.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.73079954E12, 2305.0], [1.7307996E12, 8020.2], [1.73079966E12, 4698.5]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.73079954E12, 2342.0], [1.7307996E12, 8679.84], [1.73079966E12, 5694.98]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.73079954E12, 2329.0], [1.7307996E12, 8215.0], [1.73079966E12, 5098.95]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.73079954E12, 707.0], [1.7307996E12, 2371.0], [1.73079966E12, 739.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.73079954E12, 1409.0], [1.7307996E12, 6300.0], [1.73079966E12, 2738.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73079966E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 769.5, "minX": 10.0, "maxY": 8636.5, "series": [{"data": [[41.0, 3779.0], [10.0, 8636.5], [11.0, 5693.0], [54.0, 805.0], [56.0, 4724.0], [63.0, 4748.0], [16.0, 769.5], [67.0, 5512.0], [78.0, 7977.0], [85.0, 3090.0], [87.0, 4005.0], [88.0, 7020.0], [23.0, 1845.0], [95.0, 6318.0], [97.0, 1642.0], [103.0, 2444.0], [26.0, 2901.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 103.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 605.5, "minX": 10.0, "maxY": 8447.5, "series": [{"data": [[41.0, 3620.0], [10.0, 8447.5], [11.0, 5500.0], [54.0, 637.5], [56.0, 4558.0], [63.0, 4498.0], [16.0, 605.5], [67.0, 5352.0], [78.0, 7769.5], [85.0, 2930.0], [87.0, 3779.0], [88.0, 6855.5], [23.0, 1689.0], [95.0, 6155.0], [97.0, 1477.0], [103.0, 2289.0], [26.0, 2739.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 103.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 8.333333333333334, "minX": 1.73079954E12, "maxY": 8.333333333333334, "series": [{"data": [[1.73079954E12, 8.333333333333334], [1.73079966E12, 8.333333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73079966E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.65, "minX": 1.73079954E12, "maxY": 8.333333333333334, "series": [{"data": [[1.73079954E12, 0.65], [1.7307996E12, 7.683333333333334], [1.73079966E12, 8.333333333333334]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73079966E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.65, "minX": 1.73079954E12, "maxY": 8.333333333333334, "series": [{"data": [[1.73079954E12, 0.65], [1.7307996E12, 7.683333333333334], [1.73079966E12, 8.333333333333334]], "isOverall": false, "label": "https://superset.m-net.in/bi/site/site1/dashboards/6265efb8-258f-4ad5-9461-7a952c6df353/spends%20roi/tv%20spends?showmydashboards=1-success", "isController": false}, {"data": [[1.73079954E12, 0.65], [1.7307996E12, 7.683333333333334], [1.73079966E12, 8.333333333333334]], "isOverall": false, "label": "Test-success", "isController": true}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73079966E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.3, "minX": 1.73079954E12, "maxY": 16.666666666666668, "series": [{"data": [[1.73079954E12, 1.3], [1.7307996E12, 15.366666666666667], [1.73079966E12, 16.666666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73079966E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

